//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// Chat defines model for Chat.
type Chat struct {
	// Authorized Whether the chat is authorized
	Authorized bool `json:"authorized"`

	// Id The unique identifier for the chat
	Id int `json:"id"`

	// TgChatId The Telegram chat ID
	TgChatId int `json:"tg_chat_id"`

	// TgChatName The name of the chat
	TgChatName string `json:"tg_chat_name"`
}

// Role defines model for Role.
type Role struct {
	// ChatId The unique identifier for the chat
	ChatId int `json:"chat_id"`

	// Id The unique identifier for the role
	Id int `json:"id"`

	// Name The name of the role
	Name string `json:"name"`

	// TgChatId The Telegram chat ID
	TgChatId int `json:"tg_chat_id"`

	// TgChatName The name of the chat
	TgChatName string `json:"tg_chat_name"`
}

// User defines model for User.
type User struct {
	// ChatId The unique identifier for the chat
	ChatId int `json:"chat_id"`

	// Id The unique identifier for the user
	Id int `json:"id"`

	// TgChatId The Telegram chat ID
	TgChatId int `json:"tg_chat_id"`

	// TgChatName The name of the chat
	TgChatName string `json:"tg_chat_name"`

	// TgUserId The Telegram user ID
	TgUserId int `json:"tg_user_id"`

	// TgUserName The name of the user
	TgUserName string `json:"tg_user_name"`
}

// ChatListResponse defines model for ChatListResponse.
type ChatListResponse = []Chat

// RoleListResponse defines model for RoleListResponse.
type RoleListResponse = []Role

// UserListResponse defines model for UserListResponse.
type UserListResponse = []User

// RoleRequest defines model for RoleRequest.
type RoleRequest struct {
	// Name The name of the role
	Name string `json:"name"`
}

// AuthorizeChatParams defines parameters for AuthorizeChat.
type AuthorizeChatParams struct {
	Authorized bool `form:"authorized" json:"authorized"`
}

// CreateRoleJSONBody defines parameters for CreateRole.
type CreateRoleJSONBody struct {
	// Name The name of the role
	Name string `json:"name"`
}

// CreateRoleJSONRequestBody defines body for CreateRole for application/json ContentType.
type CreateRoleJSONRequestBody CreateRoleJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all chats
	// (GET /chats)
	GetChats(w http.ResponseWriter, r *http.Request)
	// Authorize/deauthorize chat
	// (PUT /chats/{chat_id})
	AuthorizeChat(w http.ResponseWriter, r *http.Request, chatId int64, params AuthorizeChatParams)
	// Get all roles for a chat
	// (GET /chats/{chat_id}/roles)
	GetChatRoles(w http.ResponseWriter, r *http.Request, chatId int64)
	// Create a role
	// (POST /chats/{chat_id}/roles)
	CreateRole(w http.ResponseWriter, r *http.Request, chatId int64)
	// Get all users for a chat
	// (GET /chats/{chat_id}/users)
	GetChatUsers(w http.ResponseWriter, r *http.Request, chatId int64)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetChats operation middleware
func (siw *ServerInterfaceWrapper) GetChats(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetChats(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AuthorizeChat operation middleware
func (siw *ServerInterfaceWrapper) AuthorizeChat(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "chat_id" -------------
	var chatId int64

	err = runtime.BindStyledParameterWithOptions("simple", "chat_id", r.PathValue("chat_id"), &chatId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "chat_id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthorizeChatParams

	// ------------- Required query parameter "authorized" -------------

	if paramValue := r.URL.Query().Get("authorized"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "authorized"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "authorized", r.URL.Query(), &params.Authorized)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "authorized", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AuthorizeChat(w, r, chatId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetChatRoles operation middleware
func (siw *ServerInterfaceWrapper) GetChatRoles(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "chat_id" -------------
	var chatId int64

	err = runtime.BindStyledParameterWithOptions("simple", "chat_id", r.PathValue("chat_id"), &chatId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "chat_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetChatRoles(w, r, chatId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateRole operation middleware
func (siw *ServerInterfaceWrapper) CreateRole(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "chat_id" -------------
	var chatId int64

	err = runtime.BindStyledParameterWithOptions("simple", "chat_id", r.PathValue("chat_id"), &chatId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "chat_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateRole(w, r, chatId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetChatUsers operation middleware
func (siw *ServerInterfaceWrapper) GetChatUsers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "chat_id" -------------
	var chatId int64

	err = runtime.BindStyledParameterWithOptions("simple", "chat_id", r.PathValue("chat_id"), &chatId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "chat_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetChatUsers(w, r, chatId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       *http.ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m *http.ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m *http.ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/chats", wrapper.GetChats)
	m.HandleFunc("PUT "+options.BaseURL+"/chats/{chat_id}", wrapper.AuthorizeChat)
	m.HandleFunc("GET "+options.BaseURL+"/chats/{chat_id}/roles", wrapper.GetChatRoles)
	m.HandleFunc("POST "+options.BaseURL+"/chats/{chat_id}/roles", wrapper.CreateRole)
	m.HandleFunc("GET "+options.BaseURL+"/chats/{chat_id}/users", wrapper.GetChatUsers)

	return m
}

type ChatListResponseJSONResponse []Chat

type RoleListResponseJSONResponse []Role

type UserListResponseJSONResponse []User

type GetChatsRequestObject struct {
}

type GetChatsResponseObject interface {
	VisitGetChatsResponse(w http.ResponseWriter) error
}

type GetChats200JSONResponse struct{ ChatListResponseJSONResponse }

func (response GetChats200JSONResponse) VisitGetChatsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetChats404Response struct {
}

func (response GetChats404Response) VisitGetChatsResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AuthorizeChatRequestObject struct {
	ChatId int64 `json:"chat_id"`
	Params AuthorizeChatParams
}

type AuthorizeChatResponseObject interface {
	VisitAuthorizeChatResponse(w http.ResponseWriter) error
}

type AuthorizeChat200Response struct {
}

func (response AuthorizeChat200Response) VisitAuthorizeChatResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type AuthorizeChat404Response struct {
}

func (response AuthorizeChat404Response) VisitAuthorizeChatResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetChatRolesRequestObject struct {
	ChatId int64 `json:"chat_id"`
}

type GetChatRolesResponseObject interface {
	VisitGetChatRolesResponse(w http.ResponseWriter) error
}

type GetChatRoles200JSONResponse struct{ RoleListResponseJSONResponse }

func (response GetChatRoles200JSONResponse) VisitGetChatRolesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetChatRoles404Response struct {
}

func (response GetChatRoles404Response) VisitGetChatRolesResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type CreateRoleRequestObject struct {
	ChatId int64 `json:"chat_id"`
	Body   *CreateRoleJSONRequestBody
}

type CreateRoleResponseObject interface {
	VisitCreateRoleResponse(w http.ResponseWriter) error
}

type CreateRole200Response struct {
}

func (response CreateRole200Response) VisitCreateRoleResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetChatUsersRequestObject struct {
	ChatId int64 `json:"chat_id"`
}

type GetChatUsersResponseObject interface {
	VisitGetChatUsersResponse(w http.ResponseWriter) error
}

type GetChatUsers200JSONResponse struct{ UserListResponseJSONResponse }

func (response GetChatUsers200JSONResponse) VisitGetChatUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetChatUsers404Response struct {
}

func (response GetChatUsers404Response) VisitGetChatUsersResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get all chats
	// (GET /chats)
	GetChats(ctx context.Context, request GetChatsRequestObject) (GetChatsResponseObject, error)
	// Authorize/deauthorize chat
	// (PUT /chats/{chat_id})
	AuthorizeChat(ctx context.Context, request AuthorizeChatRequestObject) (AuthorizeChatResponseObject, error)
	// Get all roles for a chat
	// (GET /chats/{chat_id}/roles)
	GetChatRoles(ctx context.Context, request GetChatRolesRequestObject) (GetChatRolesResponseObject, error)
	// Create a role
	// (POST /chats/{chat_id}/roles)
	CreateRole(ctx context.Context, request CreateRoleRequestObject) (CreateRoleResponseObject, error)
	// Get all users for a chat
	// (GET /chats/{chat_id}/users)
	GetChatUsers(ctx context.Context, request GetChatUsersRequestObject) (GetChatUsersResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetChats operation middleware
func (sh *strictHandler) GetChats(w http.ResponseWriter, r *http.Request) {
	var request GetChatsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetChats(ctx, request.(GetChatsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetChats")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetChatsResponseObject); ok {
		if err := validResponse.VisitGetChatsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AuthorizeChat operation middleware
func (sh *strictHandler) AuthorizeChat(w http.ResponseWriter, r *http.Request, chatId int64, params AuthorizeChatParams) {
	var request AuthorizeChatRequestObject

	request.ChatId = chatId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AuthorizeChat(ctx, request.(AuthorizeChatRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AuthorizeChat")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AuthorizeChatResponseObject); ok {
		if err := validResponse.VisitAuthorizeChatResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetChatRoles operation middleware
func (sh *strictHandler) GetChatRoles(w http.ResponseWriter, r *http.Request, chatId int64) {
	var request GetChatRolesRequestObject

	request.ChatId = chatId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetChatRoles(ctx, request.(GetChatRolesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetChatRoles")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetChatRolesResponseObject); ok {
		if err := validResponse.VisitGetChatRolesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateRole operation middleware
func (sh *strictHandler) CreateRole(w http.ResponseWriter, r *http.Request, chatId int64) {
	var request CreateRoleRequestObject

	request.ChatId = chatId

	var body CreateRoleJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateRole(ctx, request.(CreateRoleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateRole")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateRoleResponseObject); ok {
		if err := validResponse.VisitCreateRoleResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetChatUsers operation middleware
func (sh *strictHandler) GetChatUsers(w http.ResponseWriter, r *http.Request, chatId int64) {
	var request GetChatUsersRequestObject

	request.ChatId = chatId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetChatUsers(ctx, request.(GetChatUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetChatUsers")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetChatUsersResponseObject); ok {
		if err := validResponse.VisitGetChatUsersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
